{"version":3,"sources":["utils/maxId.ts","stores/EmployeeStore.ts","stores/index.ts","components/employees/EmployeeRow.tsx","components/employees/EmployeeTable.tsx","components/forms/EmployeeForm/EmployeeFormInputs.tsx","components/forms/EmployeeForm/index.tsx","utils/validateEmloyee.ts","components/employees/EmployeeDictionary.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["maxId","items","forEach","i","id","EmployeeStore","makeAutoObservable","this","employee","newEmployee","employees","push","filter","e","index","findIndex","observable","fullName","position","birthday","gender","fired","colleagues","action","StoresContext","createContext","StoresProvider","Provider","EmployeeRow","onClick","className","EmployeeTable","observer","onEmployeeClick","selectedEmployee","map","isSelected","EmployeeFormInputs","employeeStore","errors","onInput","possibleColleagues","handleFullNameInput","update","handleGenderChange","value","currentTarget","name","checked","onChange","type","htmlFor","selected","selectedOptions","ids","length","includes","toString","handleColleagueChange","multiple","possibleColleague","isColleague","EmployeeForm","initialErrors","useState","setErrors","useEffect","disabled","undefined","remove","has","validateEmployee","EmployeeDictionary","useContext","selectedId","setSelectedId","getEmployById","find","hasErrors","add","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAAaA,EAAQ,SAACC,GACpB,IAAID,EAAQ,EAOZ,OANAC,EAAMC,SAAQ,SAAAC,GACRA,EAAEC,GAAKJ,IACTA,EAAQG,EAAEC,OAIPJ,GCJIK,GAAb,aAyCE,aAAe,yDACbC,YAAmBC,MA1CvB,uCA6CE,SACIC,GACF,IAAIC,EAAW,2BAAOD,GAAP,IAAiBJ,GAAIJ,EAAMO,KAAKG,WAAa,IAG5D,OAFAH,KAAKG,UAAUC,KAAKF,GAEbA,IAlDX,oBAqDE,SACOL,GACLG,KAAKG,UAAYH,KAAKG,UAAUE,QAAO,SAAAC,GAAC,OAAIA,EAAET,KAAOA,OAvDzD,oBA0DE,SACOI,GACL,IAAMM,EAAQP,KAAKG,UAAUK,WAAU,SAAAF,GAAC,OAAIA,EAAET,KAAOI,EAASJ,MAC9DG,KAAKG,UAAUI,GAASN,MA7D5B,4CACGQ,KADH,wEAE0B,CACtB,CACEZ,GAAI,EACJa,SAAU,2JACVC,SAAU,qEACVC,SAAU,aACVC,OAAQ,6CACRC,OAAO,EACPC,WAAY,IAEd,CACElB,GAAI,EACJa,SAAU,iHACVC,SAAU,qEACVC,SAAU,aACVC,OAAQ,6CACRC,OAAO,EACPC,WAAY,IAEd,CACElB,GAAI,EACJa,SAAU,yIACVC,SAAU,mDACVC,SAAU,aACVC,OAAQ,6CACRC,OAAO,EACPC,WAAY,IAEd,CACElB,GAAI,EACJa,SAAU,+IACVC,SAAU,mDACVC,SAAU,aACVC,OAAQ,6CACRC,OAAO,EACPC,WAAY,QArClB,+BA6CGC,KA7CH,kGAqDGA,KArDH,qGA0DGA,KA1DH,sECGaC,GAHD,IAAInB,EAGaoB,wBAAc,KAC9BC,EAAiBF,EAAcG,S,qBCC/BC,EAAyB,SAAC,GAAyC,IAAxCpB,EAAuC,EAAvCA,SAAUqB,EAA6B,EAA7BA,QAA6B,IAApBC,iBAAoB,MAAR,GAAQ,EAC7E,OACE,qBAAIA,UAAW,iBAAmBA,EAAWD,QAAS,kBAAMA,EAAQrB,EAASJ,KAA7E,UACE,6BAAKI,EAASS,WACd,6BAAKT,EAASY,SACd,6BAAKZ,EAASU,WACd,6BAAKV,EAASW,WACd,6BAAKX,EAASa,MAAO,eAAM,2BCLpBU,EAA2BC,aAAS,YAAqD,IAAnDtB,EAAkD,EAAlDA,UAAWuB,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,iBAW7E,OACE,wBAAOJ,UAAU,sDAAjB,UACE,gCACE,+BACE,oDACA,oDACA,wFACA,2GACA,2EAGJ,gCACGpB,EAAUyB,KAtBI,SAAC3B,EAAoBM,GACxC,IAAMsB,EAAa5B,IAAa0B,EAEhC,OAAO,cAAC,EAAD,CAEL1B,SAAUA,EACVqB,QAASI,EACTH,UAAWM,EAAY,oBAAqB,IAHvCtB,cCHEuB,EAAgCL,aAC3C,YAAiD,IAAD,MAA9CxB,EAA8C,EAA9CA,SAAU8B,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAE7B9B,EAAY4B,EAAc5B,UAC1B+B,EAAqB/B,EAAUE,QAAO,SAAAC,GAAC,OAAIA,EAAET,MAAF,OAASI,QAAT,IAASA,OAAT,EAASA,EAAUJ,OAE9DsC,EAAsB,SAACzB,GAC3BqB,EAAcK,OAAd,2BAAyBnC,GAAzB,IAAmCS,cACnCuB,KAEII,EAAqB,SAACxB,GAC1BkB,EAAcK,OAAd,2BAAyBnC,GAAzB,IAAmCY,YACnCoB,KA4CF,OACE,qCACE,sBAAKV,UAAU,OAAf,UACE,uBAAOA,UAAU,aAAjB,gCACA,uBACEe,MAAK,iBAAErC,QAAF,IAAEA,OAAF,EAAEA,EAAUS,gBAAZ,QAAuB,GAC5BuB,QAAS,SAAA3B,GAAC,OAAI6B,EAAoB7B,EAAEiC,cAAcD,QAClDf,UAAU,eAAeiB,KAAK,cAChC,sBAAMjB,UAAU,cAAhB,SAA+BS,EAAOtB,cAExC,sBAAKa,UAAU,aAAf,UACE,uBACEkB,QAA8B,gDAAb,OAARxC,QAAQ,IAARA,OAAA,EAAAA,EAAUY,QACnB6B,SAAU,SAAApC,GAAC,OAAI+B,EAAmB/B,EAAEiC,cAAcD,QAClDK,KAAK,QACLL,MAAM,6CACNzC,GAAG,OACH2C,KAAK,SACLjB,UAAU,qBACZ,uBAAOA,UAAU,mBAAmBqB,QAAQ,OAA5C,2DAEF,sBAAKrB,UAAU,kBAAf,UACE,uBACEkB,QAA8B,gDAAb,OAARxC,QAAQ,IAARA,OAAA,EAAAA,EAAUY,QACnB6B,SAAU,SAAApC,GAAC,OAAI+B,EAAmB/B,EAAEiC,cAAcD,QAClDK,KAAK,QACLL,MAAM,6CACNzC,GAAG,SACH2C,KAAK,SACLjB,UAAU,qBACZ,uBAAOA,UAAU,mBAAmBqB,QAAQ,SAA5C,2DAEF,sBAAKrB,UAAU,OAAf,UACE,2FACA,wBACEiB,KAAK,WACLjB,UAAU,cACVmB,SAAU,SAAApC,GAAC,OA/EWK,EA+EcL,EAAEiC,cAAcD,MA9E1DP,EAAcK,OAAd,2BAAyBnC,GAAzB,IAAmCU,mBACnCsB,IAF2B,IAACtB,GA4ExB,SAxFY,CAAC,qEAAe,mDAAY,oDA4F3BiB,KAzDQ,SAACU,EAAe/B,GACzC,OACE,wBAEE+B,MAAOA,EACPO,UAAkB,OAAR5C,QAAQ,IAARA,OAAA,EAAAA,EAAUU,YAAa2B,EAHnC,SAG2CA,GAFpC/B,WAyDP,sBAAKgB,UAAU,OAAf,UACE,8GACA,uBACEe,MAAK,iBAAErC,QAAF,IAAEA,OAAF,EAAEA,EAAUW,gBAAZ,QAAuB,GAC5B8B,SAAU,SAAApC,GAAC,OA/EWM,EA+EcN,EAAEiC,cAAcD,MA9E1DP,EAAcK,OAAd,2BAAyBnC,GAAzB,IAAmCW,mBACnCqB,IAF2B,IAACrB,GAgFtB+B,KAAK,OACLpB,UAAU,mBAEd,sBAAKA,UAAU,mBAAf,UACE,uBACEkB,QAAO,iBAAExC,QAAF,IAAEA,OAAF,EAAEA,EAAUa,aAAZ,QAAoB,GAC3BS,UAAU,mBACVmB,SAAU,SAAApC,GAAC,OA3FQQ,EA2FcR,EAAEiC,cAAcE,QA1FvDV,EAAcK,OAAd,2BAAyBnC,GAAzB,IAAmCa,gBACnCmB,IAFwB,IAACnB,GA4FnB6B,KAAK,WACL9C,GAAG,UACL,uBAAO+C,QAAQ,QAAf,qDAEF,+EAEE,wBACErB,UAAU,gCACVmB,SAAU,SAAApC,GAAC,OA5FW,SAACwC,GAE7B,IADA,IAAMC,EAAgB,GACbnD,EAAI,EAAGA,EAAIkD,EAAgBE,OAAQpD,IAC1CmD,EAAI3C,KAAK0C,EAAgBlD,GAAG0C,OAG9B,IAAMvB,EAAaZ,EAAUE,QAAO,SAAAC,GAAC,OAAIyC,EAAIE,SAAS3C,EAAET,GAAGqD,eAC3DnB,EAAcK,OAAd,2BAAyBnC,GAAzB,IAAmCc,gBACnCkB,IAoFqBkB,CAAsB7C,EAAEiC,cAAcO,kBACrDM,UAAQ,EAHV,SAIGlB,EAAmBN,KA3EN,SAACyB,EAA6B9C,GAAmB,IAAD,EAC9D+C,EAAW,OAAGrD,QAAH,IAAGA,GAAH,UAAGA,EAAUc,kBAAb,aAAG,EAAsBkC,SAASI,GAEnD,OACE,wBAEEf,MAAOe,EAAkBxD,GACzBgD,SAAUS,EAHZ,SAG0BD,EAAkB3C,UAFrCH,iBCjDAgD,EAA0B9B,aACrC,YAAwD,IAAtDxB,EAAqD,EAArDA,SAAU8B,EAA2C,EAA3CA,cAAeyB,EAA4B,EAA5BA,cAAevB,EAAa,EAAbA,QAC1C,EAA4BwB,mBAAiBD,GAA7C,mBAAOxB,EAAP,KAAe0B,EAAf,KAEAC,qBAAU,WACRD,EAAUF,KACT,CAACA,IAOJ,OACE,qBAAKjC,UAAU,+BAAf,SACE,gCACE,cAACO,EAAD,CACEC,cAAeA,EACf9B,SAAUA,EACV+B,OAAQA,EACRC,QAASA,IACX,wBACE2B,cAAuBC,IAAb5D,EACVqB,QAfkB,WACxBS,EAAc+B,OAAO7D,EAASJ,IAC9B6D,EAAU,CAACK,KAAK,KAcVxC,UAAU,yBAHZ,gEChCKyC,EAAmB,SAAC/D,GAC/B,IAAM+B,EAAS,CAAC+B,KAAK,GAMrB,OALK9D,GAAmC,MAAf,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUS,YACzBsB,EAAOtB,SAAW,wFAClBsB,EAAO+B,KAAM,GAGR/B,GCFIiC,EAAqBxC,aAAS,WACzC,IACMM,ENAuBmC,qBAAWjD,GMAXhB,SACvBE,EAAY4B,EAAc5B,UAChC,EAAoCsD,qBAApC,mBAAOU,EAAP,KAAmBC,EAAnB,KACA,EAA4BX,mBAAS,IAArC,mBAAOzB,EAAP,KAAe0B,EAAf,KAyBMW,EAAgB,SAACxE,GACrB,OAAOM,EAAUmE,MAAK,SAAAhE,GAAC,OAAIA,EAAET,KAAOA,MAEhC0E,EAAY,WAChB,IAAM1B,EAAWwB,EAAcF,GACzBnC,EAASgC,EAAiBnB,GAChC,OAAIA,GAAYb,EAAO+B,KACrBL,EAAU1B,IAEH,IAGT0B,EAAU,CAACK,KAAK,KAET,IAST,OACE,sBAAKxC,UAAU,sBAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,iCAAf,SACE,wBAAQA,UAAU,0BAA0BD,QAlD1B,WACxB,IAAGiD,IAAH,CAIA,IAAMtE,EAAW8B,EAAcyC,IAAI,CACjC3E,IAAK,EACLa,SAAU,GACVI,OAAO,EACPH,SAAU,qEACVE,OAAQ,6CACRD,SAAU,GACVG,WAAY,KAEdqD,EAAcnE,EAASJ,MAoCjB,kEAGJ,sBAAK0B,UAAU,6BAAf,UACE,qBAAKA,UAAU,WAAf,SACE,cAACC,EAAD,CACEG,iBAAkB0C,EAAcF,GAChChE,UAAWA,EACXuB,gBA1Ce,SAAC7B,GACrB0E,KAIHH,EAAcvE,QAuCV,qBAAK0B,UAAU,WAAf,SACE,cAACgC,EAAD,CACEC,cAAexB,EACfD,cAAeA,EACf9B,SAAUoE,EAAcF,GACxBlC,QAzBU,WAClB,IAAMY,EAAWwB,EAAcF,GACzBnC,EAASgC,EAAiBnB,GAChCa,EAAU1B,iBCxCCyC,MAZf,WACE,IAAM1C,EAAgB,IAAIjC,EAE1B,OACE,cAACqB,EAAD,CAAgBmB,MAAO,CAACrC,SAAU8B,GAAlC,SACE,qBAAKR,UAAU,MAAf,SACE,cAAC0C,EAAD,SCEOS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e99bcf83.chunk.js","sourcesContent":["export const maxId = (items: {id: number}[]) => {\r\n  let maxId = 0;\r\n  items.forEach(i => {\r\n    if (i.id > maxId) {\r\n      maxId = i.id;\r\n    }\r\n  })\r\n\r\n  return maxId;\r\n}","import {action, makeAutoObservable, observable} from \"mobx\";\r\nimport {Employee, EmployeeFormData} from \"../models\";\r\nimport {maxId} from \"../utils/maxId\";\r\n\r\nexport class EmployeeStore {\r\n  @observable\r\n  employees: Employee[] = [\r\n    {\r\n      id: 1,\r\n      fullName: 'Алексеев Алексей Алексеевич',\r\n      position: 'разработчик',\r\n      birthday: '1998-07-12',\r\n      gender: 'мужчина',\r\n      fired: true,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 2,\r\n      fullName: 'Иванов Иван Иванович',\r\n      position: 'разработчик',\r\n      birthday: '1999-12-01',\r\n      gender: 'мужчина',\r\n      fired: false,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 3,\r\n      fullName: 'Нестерак Сергей Петрович',\r\n      position: 'менеджер',\r\n      birthday: '1999-08-30',\r\n      gender: 'мужчина',\r\n      fired: true,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 4,\r\n      fullName: 'Релевин Максим Алексеевич',\r\n      position: 'рекрутер',\r\n      birthday: '1989-11-30',\r\n      gender: 'мужчина',\r\n      fired: false,\r\n      colleagues: [],\r\n    },\r\n  ];\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  @action\r\n  add(employee: EmployeeFormData) {\r\n    let newEmployee = {...employee, id: maxId(this.employees) + 1};\r\n    this.employees.push(newEmployee);\r\n\r\n    return newEmployee;\r\n  }\r\n\r\n  @action\r\n  remove(id: number) {\r\n    this.employees = this.employees.filter(e => e.id !== id);\r\n  }\r\n\r\n  @action\r\n  update(employee: Employee) {\r\n    const index = this.employees.findIndex(e => e.id === employee.id);\r\n    this.employees[index] = employee;\r\n  }\r\n}\r\n\r\n","import {createContext, useContext} from \"react\";\r\nimport {EmployeeStore} from \"./EmployeeStore\";\r\n\r\nconst stores = {\r\n  employee: new EmployeeStore(),\r\n}\r\n\r\nexport const StoresContext = createContext({} as typeof stores);\r\nexport const StoresProvider = StoresContext.Provider;\r\n\r\nexport const useStores = () => useContext(StoresContext);","import {Employee} from \"../../models\";\r\nimport {FC} from \"react\";\r\n\r\ntype Props = {\r\n  employee: Employee\r\n  onClick: (id: number) => void\r\n  className: string\r\n}\r\n\r\nexport const EmployeeRow: FC<Props> = ({employee, onClick, className = ''}) => {\r\n  return (\r\n    <tr className={'employee-item ' + className} onClick={() => onClick(employee.id)}>\r\n      <td>{employee.fullName}</td>\r\n      <td>{employee.gender}</td>\r\n      <td>{employee.position}</td>\r\n      <td>{employee.birthday}</td>\r\n      <td>{employee.fired? 'да': 'нет'}</td>\r\n    </tr>\r\n  )\r\n}","import {Employee} from \"../../models\";\r\nimport {FC} from \"react\";\r\nimport {EmployeeRow} from \"./EmployeeRow\";\r\nimport {observer} from \"mobx-react\";\r\n\r\ntype Props = {\r\n  employees: Employee[]\r\n  onEmployeeClick: (id: number) => void\r\n  selectedEmployee: Employee\r\n}\r\n\r\nexport const EmployeeTable: FC<Props> = observer(({employees, onEmployeeClick, selectedEmployee}) => {\r\n  const makeEmployee = (employee: Employee, index: number) => {\r\n    const isSelected = employee === selectedEmployee;\r\n\r\n    return <EmployeeRow\r\n      key={index}\r\n      employee={employee}\r\n      onClick={onEmployeeClick}\r\n      className={isSelected? 'selected-employee': ''}/>;\r\n  }\r\n\r\n  return (\r\n    <table className=\"employee-list table table-hover table-bordered mr-2\">\r\n      <thead>\r\n        <tr>\r\n          <td>ФИО</td>\r\n          <td>Пол</td>\r\n          <td>Должность</td>\r\n          <td>День рождения</td>\r\n          <td>Уволен</td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {employees.map(makeEmployee)}\r\n      </tbody>\r\n    </table>\r\n  )\r\n})","import {observer} from \"mobx-react\";\r\nimport {FC} from \"react\";\r\nimport {Employee} from \"../../../models\";\r\nimport {EmployeeStore} from \"../../../stores/EmployeeStore\";\r\nimport {Errors} from \"../../employees/EmployeeDictionary\";\r\n\r\ntype Props = {\r\n  employeeStore: EmployeeStore\r\n  employee: Employee\r\n  errors: Errors\r\n  onInput: () => void\r\n}\r\n\r\nexport const EmployeeFormInputs: FC<Props> = observer(\r\n  ({employee, employeeStore, errors, onInput}) => {\r\n  const positions = ['разработчик', 'менеджер', 'рекрутер'];\r\n  const employees = employeeStore.employees;\r\n  const possibleColleagues = employees.filter(e => e.id !== employee?.id);\r\n\r\n  const handleFullNameInput = (fullName: string) => {\r\n    employeeStore.update({...employee, fullName});\r\n    onInput();\r\n  }\r\n  const handleGenderChange = (gender: string) => {\r\n    employeeStore.update({...employee, gender});\r\n    onInput();\r\n  }\r\n  const handlePositionChange = (position: string) => {\r\n    employeeStore.update({...employee, position});\r\n    onInput();\r\n  }\r\n  const handleFiredChange = (fired: boolean) => {\r\n    employeeStore.update({...employee, fired});\r\n    onInput();\r\n  }\r\n  const handleBirthdayChange = (birthday: string) => {\r\n    employeeStore.update({...employee, birthday});\r\n    onInput();\r\n  }\r\n  const handleColleagueChange = (selectedOptions: HTMLCollectionOf<HTMLOptionElement>) => {\r\n    const ids: string[] = [];\r\n    for (let i = 0; i < selectedOptions.length; i++) {\r\n      ids.push(selectedOptions[i].value);\r\n    }\r\n\r\n    const colleagues = employees.filter(e => ids.includes(e.id.toString()));\r\n    employeeStore.update({...employee, colleagues})\r\n    onInput();\r\n  }\r\n\r\n  const makePositionOption = (value: string, index: number) => {\r\n    return (\r\n      <option\r\n        key={index}\r\n        value={value}\r\n        selected={employee?.position === value}>{value}</option>\r\n    )\r\n  }\r\n  const makeColleague = (possibleColleague: Employee, index: number) => {\r\n    const isColleague = employee?.colleagues?.includes(possibleColleague)\r\n\r\n    return (\r\n      <option\r\n        key={index}\r\n        value={possibleColleague.id}\r\n        selected={isColleague}>{possibleColleague.fullName}</option>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">ФИО</label>\r\n        <input\r\n          value={employee?.fullName?? ''}\r\n          onInput={e => handleFullNameInput(e.currentTarget.value)}\r\n          className=\"form-control\" name=\"full-name\"/>\r\n        <span className=\"text-danger\">{errors.fullName}</span>\r\n      </div>\r\n      <div className=\"form-check\">\r\n        <input\r\n          checked={employee?.gender === 'мужчина'}\r\n          onChange={e => handleGenderChange(e.currentTarget.value)}\r\n          type=\"radio\"\r\n          value=\"мужчина\"\r\n          id=\"male\"\r\n          name=\"gender\"\r\n          className=\"form-check-input\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"male\">Мужчина</label>\r\n      </div>\r\n      <div className=\"form-check mb-3\">\r\n        <input\r\n          checked={employee?.gender === 'женщина'}\r\n          onChange={e => handleGenderChange(e.currentTarget.value)}\r\n          type=\"radio\"\r\n          value=\"женщина\"\r\n          id=\"female\"\r\n          name=\"gender\"\r\n          className=\"form-check-input\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"female\">Женщина</label>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label>Должность</label>\r\n        <select\r\n          name=\"position\"\r\n          className=\"form-select\"\r\n          onChange={e => handlePositionChange(e.currentTarget.value)}>\r\n          {positions.map(makePositionOption)}\r\n        </select>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label>День рождения</label>\r\n        <input\r\n          value={employee?.birthday?? ''}\r\n          onChange={e => handleBirthdayChange(e.currentTarget.value)}\r\n          type=\"date\"\r\n          className=\"form-select\"/>\r\n      </div>\r\n      <div className=\"input-group mb-3\">\r\n        <input\r\n          checked={employee?.fired?? ''}\r\n          className=\"form-check-input\"\r\n          onChange={e => handleFiredChange(e.currentTarget.checked)}\r\n          type=\"checkbox\"\r\n          id=\"fired\"/>\r\n        <label htmlFor=\"fired\">Уволен</label>\r\n      </div>\r\n      <label>\r\n        Коллеги\r\n        <select\r\n          className=\"form-select colleagues-select\"\r\n          onChange={e => handleColleagueChange(e.currentTarget.selectedOptions)}\r\n          multiple>\r\n          {possibleColleagues.map(makeColleague)}\r\n        </select>\r\n      </label>\r\n    </>\r\n  )\r\n})","import {FC, useEffect, useState} from \"react\";\r\nimport {Employee} from \"../../../models\";\r\nimport {observer} from \"mobx-react\";\r\nimport {EmployeeStore} from \"../../../stores/EmployeeStore\";\r\nimport {Errors} from \"../../employees/EmployeeDictionary\";\r\nimport {EmployeeFormInputs} from \"./EmployeeFormInputs\";\r\n\r\ntype Props = {\r\n  employeeStore: EmployeeStore\r\n  employee: Employee\r\n  initialErrors: Errors\r\n  onInput: () => void\r\n}\r\n\r\nexport const EmployeeForm: FC<Props> = observer(\r\n  ({employee, employeeStore, initialErrors, onInput}) => {\r\n  const [errors, setErrors] = useState<Errors>(initialErrors);\r\n\r\n  useEffect(() => {\r\n    setErrors(initialErrors);\r\n  }, [initialErrors])\r\n\r\n  const handleRemoveClick = () => {\r\n    employeeStore.remove(employee.id);\r\n    setErrors({has: false});\r\n  }\r\n\r\n  return (\r\n    <div className=\"card card-body employee-form\">\r\n      <div>\r\n        <EmployeeFormInputs\r\n          employeeStore={employeeStore}\r\n          employee={employee}\r\n          errors={errors}\r\n          onInput={onInput}/>\r\n        <button\r\n          disabled={employee === undefined}\r\n          onClick={handleRemoveClick}\r\n          className=\"btn btn-outline-danger\">Удалить</button>\r\n      </div>\r\n    </div>\r\n  )\r\n})","import {EmployeeFormData} from \"../models\";\r\nimport {Errors} from \"../components/employees/EmployeeDictionary\";\r\n\r\nexport const validateEmployee = (employee: EmployeeFormData) => {\r\n  const errors = {has: false} as Errors;\r\n  if (!employee || employee?.fullName === '') {\r\n    errors.fullName = 'ФИО обязательно';\r\n    errors.has = true;\r\n  }\r\n\r\n  return errors;\r\n}","import {observer} from \"mobx-react\";\r\nimport {useStores} from \"../../stores\";\r\nimport {EmployeeTable} from \"./EmployeeTable\";\r\nimport {EmployeeForm} from \"../forms/EmployeeForm\";\r\nimport {useState} from \"react\";\r\nimport {Employee} from \"../../models\";\r\nimport {validateEmployee} from \"../../utils/validateEmloyee\";\r\n\r\nexport const EmployeeDictionary = observer(() => {\r\n  const stores = useStores();\r\n  const employeeStore = stores.employee;\r\n  const employees = employeeStore.employees;\r\n  const [selectedId, setSelectedId] = useState<number>();\r\n  const [errors, setErrors] = useState({} as Errors)\r\n\r\n  const tryAddNewEmployee = () => {\r\n    if(hasErrors()) {\r\n      return;\r\n    }\r\n\r\n    const employee = employeeStore.add({\r\n      id: -1,\r\n      fullName: '',\r\n      fired: false,\r\n      position: 'разработчик',\r\n      gender: 'женщина',\r\n      birthday: '',\r\n      colleagues: []\r\n    });\r\n    setSelectedId(employee.id);\r\n  }\r\n  const trySetSelectedId = (id: number) => {\r\n    if(hasErrors()) {\r\n      return;\r\n    }\r\n\r\n    setSelectedId(id);\r\n  }\r\n  const getEmployById = (id?: number) => {\r\n    return employees.find(e => e.id === id) as Employee;\r\n  }\r\n  const hasErrors = () => {\r\n    const selected = getEmployById(selectedId);\r\n    const errors = validateEmployee(selected);\r\n    if (selected && errors.has) {\r\n      setErrors(errors);\r\n\r\n      return true;\r\n    }\r\n\r\n    setErrors({has: false});\r\n\r\n    return false;\r\n  }\r\n\r\n  const handleInput = () => {\r\n    const selected = getEmployById(selectedId);\r\n    const errors = validateEmployee(selected);\r\n    setErrors(errors);\r\n  }\r\n\r\n  return (\r\n    <div className=\"employee-dictionary\">\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-md-8 new-employee-btn-wrap\">\r\n          <button className=\"btn btn-outline-primary\" onClick={tryAddNewEmployee}>Добавить</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          <EmployeeTable\r\n            selectedEmployee={getEmployById(selectedId)}\r\n            employees={employees}\r\n            onEmployeeClick={trySetSelectedId}/>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <EmployeeForm\r\n            initialErrors={errors}\r\n            employeeStore={employeeStore}\r\n            employee={getEmployById(selectedId)}\r\n            onInput={handleInput}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport type Errors = {\r\n  fullName?: string\r\n  has: boolean\r\n}","import React from 'react';\nimport './App.css';\nimport { StoresProvider } from './stores';\nimport {EmployeeStore} from \"./stores/EmployeeStore\";\nimport {EmployeeDictionary} from \"./components/employees/EmployeeDictionary\"\n\nfunction App() {\n  const employeeStore = new EmployeeStore();\n\n  return (\n    <StoresProvider value={{employee: employeeStore}}>\n      <div className=\"App\">\n        <EmployeeDictionary/>\n      </div>\n    </StoresProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}