{"version":3,"sources":["utils/maxId.ts","stores/EmployeeStore.ts","stores/index.ts","components/employees/EmployeeItem.tsx","components/employees/EmployeeList.tsx","utils/validateEmloyee.ts","components/employees/BaseEmployeeForm.tsx","components/employees/EmployeeDictionary.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["maxId","items","forEach","i","id","EmployeeStore","makeAutoObservable","this","employee","newEmployee","employees","push","filter","e","index","findIndex","observable","fullName","position","birthday","gender","fired","colleagues","action","StoresContext","createContext","StoresProvider","Provider","EmployeeItem","onClick","className","EmployeeList","observer","onEmployeeClick","map","validateEmployee","errors","has","BaseEmployeeForm","employeeStore","initialErrors","possibleColleagues","useState","setErrors","useEffect","handleGenderChange","currentTarget","value","update","onInput","name","checked","onChange","type","htmlFor","selected","selectedOptions","ids","length","includes","toString","multiple","possibleColleague","isColleague","disabled","undefined","remove","EmployeeDictionary","useContext","selectedId","setSelectedId","getEmployById","find","add","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5f0903d.chunk.js","sourcesContent":["export const maxId = (items: {id: number}[]) => {\r\n  let maxId = 0;\r\n  items.forEach(i => {\r\n    if (i.id > maxId) {\r\n      maxId = i.id;\r\n    }\r\n  })\r\n\r\n  return maxId;\r\n}","import {action, makeAutoObservable, observable} from \"mobx\";\r\nimport {Employee, EmployeeFormData} from \"../models\";\r\nimport {maxId} from \"../utils/maxId\";\r\n\r\nexport class EmployeeStore {\r\n  @observable\r\n  employees: Employee[] = [\r\n    {\r\n      id: 1,\r\n      fullName: 'Alexeyevich Alexey Alexev',\r\n      position: 'manager',\r\n      birthday: '1998-07-12',\r\n      gender: 'male',\r\n      fired: true,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 2,\r\n      fullName: 'Ivanov Ivan Ivanovich',\r\n      position: 'developer',\r\n      birthday: '1999-12-01',\r\n      gender: 'male',\r\n      fired: false,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 3,\r\n      fullName: 'Sergey Petrovich Nestarnak',\r\n      position: 'manager',\r\n      birthday: '1999-08-30',\r\n      gender: 'male',\r\n      fired: true,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 4,\r\n      fullName: 'Alexandr Maximovich Relivin',\r\n      position: 'header',\r\n      birthday: '1989-11-30',\r\n      gender: 'male',\r\n      fired: false,\r\n      colleagues: [],\r\n    },\r\n  ];\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  @action\r\n  add(employee: EmployeeFormData) {\r\n    let newEmployee = {...employee, id: maxId(this.employees) + 1};\r\n    this.employees.push(newEmployee);\r\n\r\n    return newEmployee;\r\n  }\r\n\r\n  @action\r\n  remove(id: number) {\r\n    this.employees = this.employees.filter(e => e.id !== id);\r\n  }\r\n\r\n  @action\r\n  update(employee: Employee) {\r\n    const index = this.employees.findIndex(e => e.id === employee.id);\r\n    this.employees[index] = employee;\r\n  }\r\n}\r\n\r\n","import {createContext, useContext} from \"react\";\r\nimport {EmployeeStore} from \"./EmployeeStore\";\r\n\r\nconst stores = {\r\n  employee: new EmployeeStore(),\r\n}\r\n\r\nexport const StoresContext = createContext({} as typeof stores);\r\nexport const StoresProvider = StoresContext.Provider;\r\n\r\nexport const useStores = () => useContext(StoresContext);","import {Employee} from \"../../models\";\r\nimport {FC} from \"react\";\r\n\r\ntype Props = {\r\n  employee: Employee\r\n  onClick: (id: number) => void\r\n}\r\n\r\nexport const EmployeeItem: FC<Props> = ({employee, onClick}) => {\r\n  return (\r\n    <tr className=\"employee-item\" onClick={() => onClick(employee.id)}>\r\n      <td>{employee.fullName}</td>\r\n      <td>{employee.gender}</td>\r\n      <td>{employee.position}</td>\r\n      <td>{employee.birthday}</td>\r\n      <td>{employee.fired? 'yes': 'no'}</td>\r\n    </tr>\r\n  )\r\n}","import {Employee} from \"../../models\";\r\nimport {FC} from \"react\";\r\nimport {EmployeeItem} from \"./EmployeeItem\";\r\nimport {observer} from \"mobx-react\";\r\n\r\ntype Props = {\r\n  employees: Employee[]\r\n  onEmployeeClick: (id: number) => void\r\n}\r\n\r\nexport const EmployeeList: FC<Props> = observer(({employees, onEmployeeClick}) => {\r\n  function makeEmployee(employee: Employee, index: number) {\r\n    return <EmployeeItem\r\n      key={index}\r\n      employee={employee}\r\n      onClick={onEmployeeClick}/>;\r\n  }\r\n\r\n  return (\r\n    <table className=\"employee-list table table-hover table-bordered mr-2\">\r\n      <thead>\r\n        <tr>\r\n          <td>Full Name</td>\r\n          <td>Gender</td>\r\n          <td>Position</td>\r\n          <td>Birthday</td>\r\n          <td>Fired</td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {employees.map(makeEmployee)}\r\n      </tbody>\r\n    </table>\r\n  )\r\n})","import {EmployeeFormData} from \"../models\";\r\nimport {Errors} from \"../components/employees/EmployeeDictionary\";\r\n\r\nexport const validateEmployee = (employee: EmployeeFormData) => {\r\n  const errors = {has: false} as Errors;\r\n  if (!employee || employee?.fullName === '') {\r\n    errors.fullName = 'Full name is required';\r\n    errors.has = true;\r\n  }\r\n\r\n  return errors;\r\n}","import {ChangeEvent, FC, FormEvent, useEffect, useState} from \"react\";\r\nimport {Employee} from \"../../models\";\r\nimport {observer} from \"mobx-react\";\r\nimport {EmployeeStore} from \"../../stores/EmployeeStore\";\r\nimport {Errors} from \"./EmployeeDictionary\";\r\nimport {validateEmployee} from \"../../utils/validateEmloyee\";\r\n\r\ntype Props = {\r\n  employeeStore: EmployeeStore\r\n  employee: Employee\r\n  initialErrors: Errors\r\n}\r\n\r\nexport const BaseEmployeeForm: FC<Props> = observer((\r\n  {employee, employeeStore, initialErrors}) => {\r\n  const positions = ['manager', 'developer', 'header'];\r\n  const employees = employeeStore.employees;\r\n  const possibleColleagues = employees.filter(e => e.id !== employee?.id);\r\n  const [errors, setErrors] = useState<Errors>(initialErrors);\r\n\r\n  useEffect(() => {\r\n    setErrors(initialErrors)\r\n  }, [initialErrors])\r\n\r\n  const handleFullNameInput = (e: FormEvent<HTMLInputElement>) => {\r\n    const fullName = e.currentTarget.value;\r\n    employeeStore.update({...employee, fullName});\r\n  }\r\n  const handleGenderChange = (e: FormEvent<HTMLInputElement>) => {\r\n    const gender = e.currentTarget.value;\r\n    employeeStore.update({...employee, gender});\r\n  }\r\n  const handlePositionChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    const position = e.currentTarget.value;\r\n    employeeStore.update({...employee, position});\r\n  }\r\n  const handleFiredChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const fired = e.currentTarget.checked;\r\n    employeeStore.update({...employee, fired});\r\n  }\r\n  const handleBirthdayChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    let birthday = e.currentTarget.value;\r\n    employeeStore.update({...employee, birthday});\r\n  }\r\n  const handleColleagueChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    const selectedOptions = e.currentTarget.selectedOptions;\r\n    const ids: string[] = [];\r\n    for (let i = 0; i < selectedOptions.length; i++) {\r\n      ids.push(selectedOptions[i].value);\r\n    }\r\n    const colleagues = employees.filter(e => ids.includes(e.id.toString()));\r\n    employeeStore.update({...employee, colleagues})\r\n  }\r\n  const handleRemoveClick = () => {\r\n    const errors = validateEmployee(employee)\r\n    if (!errors.has) {\r\n      employeeStore.remove(employee.id);\r\n    }\r\n\r\n    setErrors(errors);\r\n  }\r\n\r\n  const makePositionOption = (value: string, index: number) => {\r\n    return (\r\n      <option\r\n        key={index}\r\n        value={value}\r\n        selected={employee?.position === value}>{value}</option>\r\n    )\r\n  }\r\n\r\n  const makeColleague = (possibleColleague: Employee, index: number) => {\r\n    const isColleague = employee?.colleagues?.includes(possibleColleague)\r\n\r\n    return (\r\n      <option\r\n        key={index}\r\n        value={possibleColleague.id}\r\n        selected={isColleague}>{possibleColleague.fullName}</option>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"card card-body\">\r\n      <div>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Full Name</label>\r\n          <input value={employee?.fullName?? ''} onInput={handleFullNameInput} className=\"form-control\" name=\"full-name\"/>\r\n          <span className=\"text-danger\">{errors.fullName}</span>\r\n        </div>\r\n        <div className=\"form-check\">\r\n          <input\r\n            checked={employee?.gender === 'male'}\r\n            onChange={handleGenderChange}\r\n            type=\"radio\"\r\n            value=\"male\"\r\n            id=\"male\"\r\n            name=\"gender\"\r\n            className=\"form-check-input\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"male\">Male</label>\r\n        </div>\r\n        <div className=\"form-check mb-3\">\r\n          <input\r\n            checked={employee?.gender === 'female'}\r\n            onChange={handleGenderChange}\r\n            type=\"radio\"\r\n            value=\"female\"\r\n            id=\"female\"\r\n            name=\"gender\"\r\n            className=\"form-check-input\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"female\">Female</label>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label>Position</label>\r\n          <select name=\"position\" className=\"form-select\" onChange={handlePositionChange}>\r\n            {positions.map(makePositionOption)}\r\n          </select>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label>Birthday</label>\r\n          <input value={employee?.birthday?? ''} onChange={handleBirthdayChange} type=\"date\" className=\"form-select\"/>\r\n        </div>\r\n        <div className=\"input-group mb-3\">\r\n          <input checked={employee?.fired?? ''} className=\"form-check-input\" onChange={handleFiredChange} type=\"checkbox\"/>\r\n          <label> Fired</label>\r\n        </div>\r\n        <label>\r\n          Colleagues\r\n          <select className=\"form-select\" onChange={handleColleagueChange} multiple>\r\n            {possibleColleagues.map(makeColleague)}\r\n          </select>\r\n        </label>\r\n        <button\r\n          disabled={employee === undefined}\r\n          onClick={handleRemoveClick}\r\n          className=\"btn btn-outline-danger\">Remove</button>\r\n      </div>\r\n    </div>\r\n  )\r\n})","import {observer} from \"mobx-react\";\r\nimport {useStores} from \"../../stores\";\r\nimport {EmployeeList} from \"./EmployeeList\";\r\nimport {BaseEmployeeForm} from \"./BaseEmployeeForm\";\r\nimport {useState} from \"react\";\r\nimport {Employee} from \"../../models\";\r\nimport {validateEmployee} from \"../../utils/validateEmloyee\";\r\n\r\nexport const EmployeeDictionary = observer(() => {\r\n  const stores = useStores();\r\n  const employeeStore = stores.employee;\r\n  const employees = employeeStore.employees;\r\n  const [selectedId, setSelectedId] = useState<number>();\r\n  const [errors, setErrors] = useState({} as Errors)\r\n\r\n  const addNewEmployee = () => {\r\n    const selected = getEmployById(selectedId);\r\n    const errors = validateEmployee(selected);\r\n    if (selected && errors.has) {\r\n      setErrors(errors);\r\n      return;\r\n    }\r\n\r\n    const employee = employeeStore.add({\r\n      id: -1,\r\n      fullName: '',\r\n      fired: false,\r\n      position: 'position',\r\n      gender: 'male',\r\n      birthday: '1999-30-10',\r\n      colleagues: []\r\n    });\r\n    setSelectedId(employee.id);\r\n    setErrors({} as Errors);\r\n  }\r\n  const selectEmployeeId = (id: number) => {\r\n    const selected = getEmployById(selectedId);\r\n    const errors = validateEmployee(selected);\r\n    if (selected && errors.has) {\r\n      setErrors(errors)\r\n      return;\r\n    }\r\n\r\n    setSelectedId(id);\r\n    setErrors({} as Errors);\r\n  }\r\n  const getEmployById = (id?: number) => {\r\n    return employees.find(e => e.id === id) as Employee;\r\n  }\r\n\r\n  return (\r\n    <div className=\"employee-dictionary\">\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-md-\">\r\n          <button className=\"btn btn-outline-primary\" onClick={addNewEmployee}>Add</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          <EmployeeList\r\n            employees={employees}\r\n            onEmployeeClick={selectEmployeeId}/>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <BaseEmployeeForm\r\n            initialErrors={errors}\r\n            employeeStore={employeeStore}\r\n            employee={getEmployById(selectedId)}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport type Errors = {\r\n  fullName?: string\r\n  has: boolean\r\n}","import React from 'react';\nimport './App.css';\nimport { StoresProvider } from './stores';\nimport {EmployeeStore} from \"./stores/EmployeeStore\";\nimport {EmployeeDictionary} from \"./components/employees/EmployeeDictionary\"\n\nfunction App() {\n  const employeeStore = new EmployeeStore();\n\n  return (\n    <StoresProvider value={{employee: employeeStore}}>\n      <div className=\"App\">\n        <EmployeeDictionary/>\n      </div>\n    </StoresProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}