{"version":3,"sources":["utils/maxId.ts","stores/EmployeeStore.ts","stores/index.ts","components/employees/EmployeeItem.tsx","components/employees/EmployeeList.tsx","utils/validateEmloyee.ts","components/forms/EmployeeForm/EmployeeFormInputs.tsx","components/forms/EmployeeForm/index.tsx","components/employees/EmployeeDictionary.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["maxId","items","forEach","i","id","EmployeeStore","makeAutoObservable","this","employee","newEmployee","employees","push","filter","e","index","findIndex","observable","fullName","position","birthday","gender","fired","colleagues","action","StoresContext","createContext","StoresProvider","Provider","EmployeeItem","onClick","className","EmployeeList","observer","onEmployeeClick","selectedEmployee","map","isSelected","validateEmployee","errors","has","EmployeeFormInputs","employeeStore","possibleColleagues","handleGenderChange","update","value","onInput","currentTarget","name","checked","onChange","type","htmlFor","selected","selectedOptions","ids","length","includes","toString","handleColleagueChange","multiple","possibleColleague","isColleague","EmployeeForm","initialErrors","useState","setErrors","useEffect","disabled","undefined","remove","EmployeeDictionary","useContext","selectedId","setSelectedId","getEmployById","find","add","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAAaA,EAAQ,SAACC,GACpB,IAAID,EAAQ,EAOZ,OANAC,EAAMC,SAAQ,SAAAC,GACRA,EAAEC,GAAKJ,IACTA,EAAQG,EAAEC,OAIPJ,GCJIK,GAAb,aAyCE,aAAe,yDACbC,YAAmBC,MA1CvB,uCA6CE,SACIC,GACF,IAAIC,EAAW,2BAAOD,GAAP,IAAiBJ,GAAIJ,EAAMO,KAAKG,WAAa,IAG5D,OAFAH,KAAKG,UAAUC,KAAKF,GAEbA,IAlDX,oBAqDE,SACOL,GACLG,KAAKG,UAAYH,KAAKG,UAAUE,QAAO,SAAAC,GAAC,OAAIA,EAAET,KAAOA,OAvDzD,oBA0DE,SACOI,GACL,IAAMM,EAAQP,KAAKG,UAAUK,WAAU,SAAAF,GAAC,OAAIA,EAAET,KAAOI,EAASJ,MAC9DG,KAAKG,UAAUI,GAASN,MA7D5B,4CACGQ,KADH,wEAE0B,CACtB,CACEZ,GAAI,EACJa,SAAU,2JACVC,SAAU,qEACVC,SAAU,aACVC,OAAQ,6CACRC,OAAO,EACPC,WAAY,IAEd,CACElB,GAAI,EACJa,SAAU,iHACVC,SAAU,qEACVC,SAAU,aACVC,OAAQ,6CACRC,OAAO,EACPC,WAAY,IAEd,CACElB,GAAI,EACJa,SAAU,yIACVC,SAAU,mDACVC,SAAU,aACVC,OAAQ,6CACRC,OAAO,EACPC,WAAY,IAEd,CACElB,GAAI,EACJa,SAAU,+IACVC,SAAU,mDACVC,SAAU,aACVC,OAAQ,6CACRC,OAAO,EACPC,WAAY,QArClB,+BA6CGC,KA7CH,kGAqDGA,KArDH,qGA0DGA,KA1DH,sECGaC,GAHD,IAAInB,EAGaoB,wBAAc,KAC9BC,EAAiBF,EAAcG,S,qBCC/BC,EAA0B,SAAC,GAAyC,IAAxCpB,EAAuC,EAAvCA,SAAUqB,EAA6B,EAA7BA,QAA6B,IAApBC,iBAAoB,MAAR,GAAQ,EAC9E,OACE,qBAAIA,UAAW,iBAAmBA,EAAWD,QAAS,kBAAMA,EAAQrB,EAASJ,KAA7E,UACE,6BAAKI,EAASS,WACd,6BAAKT,EAASY,SACd,6BAAKZ,EAASU,WACd,6BAAKV,EAASW,WACd,6BAAKX,EAASa,MAAO,eAAM,2BCLpBU,EAA0BC,aAAS,YAAqD,IAAnDtB,EAAkD,EAAlDA,UAAWuB,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,iBAW5E,OACE,wBAAOJ,UAAU,sDAAjB,UACE,gCACE,+BACE,oDACA,oDACA,wFACA,2GACA,2EAGJ,gCACGpB,EAAUyB,KAtBI,SAAC3B,EAAoBM,GACxC,IAAMsB,EAAa5B,IAAa0B,EAEhC,OAAO,cAAC,EAAD,CAEL1B,SAAUA,EACVqB,QAASI,EACTH,UAAWM,EAAY,oBAAqB,IAHvCtB,cCbEuB,EAAmB,SAAC7B,GAC/B,IAAM8B,EAAS,CAACC,KAAK,GAMrB,OALK/B,GAAmC,MAAf,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUS,YACzBqB,EAAOrB,SAAW,wFAClBqB,EAAOC,KAAM,GAGRD,GCEIE,EAAgCR,aAC3C,YAAwC,IAAD,MAArCxB,EAAqC,EAArCA,SAAUiC,EAA2B,EAA3BA,cAAeH,EAAY,EAAZA,OAErB5B,EAAY+B,EAAc/B,UAC1BgC,EAAqBhC,EAAUE,QAAO,SAAAC,GAAC,OAAIA,EAAET,MAAF,OAASI,QAAT,IAASA,OAAT,EAASA,EAAUJ,OAK9DuC,EAAqB,SAACvB,GAC1BqB,EAAcG,OAAd,2BAAyBpC,GAAzB,IAAmCY,aAuCrC,OACE,qCACE,sBAAKU,UAAU,OAAf,UACE,uBAAOA,UAAU,aAAjB,gCACA,uBACEe,MAAK,iBAAErC,QAAF,IAAEA,OAAF,EAAEA,EAAUS,gBAAZ,QAAuB,GAC5B6B,QAAS,SAAAjC,GAAC,OAjDWI,EAiDaJ,EAAEkC,cAAcF,WAhDxDJ,EAAcG,OAAd,2BAAyBpC,GAAzB,IAAmCS,cADT,IAACA,GAkDrBa,UAAU,eAAekB,KAAK,cAChC,sBAAMlB,UAAU,cAAhB,SAA+BQ,EAAOrB,cAExC,sBAAKa,UAAU,aAAf,UACE,uBACEmB,QAA8B,gDAAb,OAARzC,QAAQ,IAARA,OAAA,EAAAA,EAAUY,QACnB8B,SAAU,SAAArC,GAAC,OAAI8B,EAAmB9B,EAAEkC,cAAcF,QAClDM,KAAK,QACLN,MAAM,6CACNzC,GAAG,OACH4C,KAAK,SACLlB,UAAU,qBACZ,uBAAOA,UAAU,mBAAmBsB,QAAQ,OAA5C,2DAEF,sBAAKtB,UAAU,kBAAf,UACE,uBACEmB,QAA8B,gDAAb,OAARzC,QAAQ,IAARA,OAAA,EAAAA,EAAUY,QACnB8B,SAAU,SAAArC,GAAC,OAAI8B,EAAmB9B,EAAEkC,cAAcF,QAClDM,KAAK,QACLN,MAAM,6CACNzC,GAAG,SACH4C,KAAK,SACLlB,UAAU,qBACZ,uBAAOA,UAAU,mBAAmBsB,QAAQ,SAA5C,2DAEF,sBAAKtB,UAAU,OAAf,UACE,2FACA,wBACEkB,KAAK,WACLlB,UAAU,cACVoB,SAAU,SAAArC,GAAC,OA1EWK,EA0EcL,EAAEkC,cAAcF,WAzE1DJ,EAAcG,OAAd,2BAAyBpC,GAAzB,IAAmCU,cADR,IAACA,GAuExB,SAjFY,CAAC,qEAAe,mDAAY,oDAqF3BiB,KAzDQ,SAACU,EAAe/B,GACzC,OACE,wBAEE+B,MAAOA,EACPQ,UAAkB,OAAR7C,QAAQ,IAARA,OAAA,EAAAA,EAAUU,YAAa2B,EAHnC,SAG2CA,GAFpC/B,WAyDP,sBAAKgB,UAAU,OAAf,UACE,8GACA,uBACEe,MAAK,iBAAErC,QAAF,IAAEA,OAAF,EAAEA,EAAUW,gBAAZ,QAAuB,GAC5B+B,SAAU,SAAArC,GAAC,OA5EWM,EA4EcN,EAAEkC,cAAcF,WA3E1DJ,EAAcG,OAAd,2BAAyBpC,GAAzB,IAAmCW,cADR,IAACA,GA6EtBgC,KAAK,OACLrB,UAAU,mBAEd,sBAAKA,UAAU,mBAAf,UACE,uBACEmB,QAAO,iBAAEzC,QAAF,IAAEA,OAAF,EAAEA,EAAUa,aAAZ,QAAoB,GAC3BS,UAAU,mBACVoB,SAAU,SAAArC,GAAC,OAvFQQ,EAuFcR,EAAEkC,cAAcE,aAtFvDR,EAAcG,OAAd,2BAAyBpC,GAAzB,IAAmCa,WADX,IAACA,GAwFnB8B,KAAK,WACL/C,GAAG,UACL,uBAAOgD,QAAQ,QAAf,qDAEF,+EAEE,wBACEtB,UAAU,cACVoB,SAAU,SAAArC,GAAC,OA1FW,SAACyC,GAE7B,IADA,IAAMC,EAAgB,GACbpD,EAAI,EAAGA,EAAImD,EAAgBE,OAAQrD,IAC1CoD,EAAI5C,KAAK2C,EAAgBnD,GAAG0C,OAE9B,IAAMvB,EAAaZ,EAAUE,QAAO,SAAAC,GAAC,OAAI0C,EAAIE,SAAS5C,EAAET,GAAGsD,eAC3DjB,EAAcG,OAAd,2BAAyBpC,GAAzB,IAAmCc,gBAoFdqC,CAAsB9C,EAAEkC,cAAcO,kBACrDM,UAAQ,EAHV,SAIGlB,EAAmBP,KA3EN,SAAC0B,EAA6B/C,GAAmB,IAAD,EAC9DgD,EAAW,OAAGtD,QAAH,IAAGA,GAAH,UAAGA,EAAUc,kBAAb,aAAG,EAAsBmC,SAASI,GAEnD,OACE,wBAEEhB,MAAOgB,EAAkBzD,GACzBiD,SAAUS,EAHZ,SAG0BD,EAAkB5C,UAFrCH,iBCzCAiD,EAA0B/B,aACrC,YAA+C,IAA7CxB,EAA4C,EAA5CA,SAAUiC,EAAkC,EAAlCA,cAAeuB,EAAmB,EAAnBA,cAC3B,EAA4BC,mBAAiBD,GAA7C,mBAAO1B,EAAP,KAAe4B,EAAf,KAEAC,qBAAU,WACRD,EAAUF,KACT,CAACA,IAWJ,OACE,qBAAKlC,UAAU,iBAAf,SACE,gCACE,cAACU,EAAD,CACEC,cAAeA,EACfjC,SAAUA,EACV8B,OAAQA,IACV,wBACE8B,cAAuBC,IAAb7D,EACVqB,QAlBkB,WACxB,IAAMS,EAASD,EAAiB7B,GAC3B8B,EAAOC,KACVE,EAAc6B,OAAO9D,EAASJ,IAGhC8D,EAAU5B,IAaJR,UAAU,yBAHZ,gEC9BKyC,EAAqBvC,aAAS,WACzC,IACMS,ENAuB+B,qBAAWhD,GMAXhB,SACvBE,EAAY+B,EAAc/B,UAChC,EAAoCuD,qBAApC,mBAAOQ,EAAP,KAAmBC,EAAnB,KACA,EAA4BT,mBAAS,IAArC,mBAAO3B,EAAP,KAAe4B,EAAf,KAiCMS,EAAgB,SAACvE,GACrB,OAAOM,EAAUkE,MAAK,SAAA/D,GAAC,OAAIA,EAAET,KAAOA,MAGtC,OACE,sBAAK0B,UAAU,sBAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBAAQA,UAAU,0BAA0BD,QAvC7B,WACrB,IAAMwB,EAAWsB,EAAcF,GACzBnC,EAASD,EAAiBgB,GAChC,GAAIA,GAAYf,EAAOC,IACrB2B,EAAU5B,OADZ,CAKA,IAAM9B,EAAWiC,EAAcoC,IAAI,CACjCzE,IAAK,EACLa,SAAU,GACVI,OAAO,EACPH,SAAU,qEACVE,OAAQ,6CACRD,SAAU,GACVG,WAAY,KAEdoD,EAAclE,EAASJ,IACvB8D,EAAU,MAqBJ,kEAGJ,sBAAKpC,UAAU,6BAAf,UACE,qBAAKA,UAAU,WAAf,SACE,cAACC,EAAD,CACEG,iBAAkByC,EAAcF,GAChC/D,UAAWA,EACXuB,gBA3Be,SAAC7B,GACxB,IAAMiD,EAAWsB,EAAcF,GACzBnC,EAASD,EAAiBgB,GAC5BA,GAAYf,EAAOC,IACrB2B,EAAU5B,IAIZoC,EAActE,GACd8D,EAAU,UAoBN,qBAAKpC,UAAU,WAAf,SACE,cAACiC,EAAD,CACEC,cAAe1B,EACfG,cAAeA,EACfjC,SAAUmE,EAAcF,gBClDrBK,MAZf,WACE,IAAMrC,EAAgB,IAAIpC,EAE1B,OACE,cAACqB,EAAD,CAAgBmB,MAAO,CAACrC,SAAUiC,GAAlC,SACE,qBAAKX,UAAU,MAAf,SACE,cAACyC,EAAD,SCEOQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d099fa0e.chunk.js","sourcesContent":["export const maxId = (items: {id: number}[]) => {\r\n  let maxId = 0;\r\n  items.forEach(i => {\r\n    if (i.id > maxId) {\r\n      maxId = i.id;\r\n    }\r\n  })\r\n\r\n  return maxId;\r\n}","import {action, makeAutoObservable, observable} from \"mobx\";\r\nimport {Employee, EmployeeFormData} from \"../models\";\r\nimport {maxId} from \"../utils/maxId\";\r\n\r\nexport class EmployeeStore {\r\n  @observable\r\n  employees: Employee[] = [\r\n    {\r\n      id: 1,\r\n      fullName: 'Алексеев Алексей Алексеевич',\r\n      position: 'разработчик',\r\n      birthday: '1998-07-12',\r\n      gender: 'мужчина',\r\n      fired: true,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 2,\r\n      fullName: 'Иванов Иван Иванович',\r\n      position: 'разработчик',\r\n      birthday: '1999-12-01',\r\n      gender: 'мужчина',\r\n      fired: false,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 3,\r\n      fullName: 'Нестерак Сергей Петрович',\r\n      position: 'менеджер',\r\n      birthday: '1999-08-30',\r\n      gender: 'мужчина',\r\n      fired: true,\r\n      colleagues: [],\r\n    },\r\n    {\r\n      id: 4,\r\n      fullName: 'Релевин Максим Алексеевич',\r\n      position: 'рекрутер',\r\n      birthday: '1989-11-30',\r\n      gender: 'мужчина',\r\n      fired: false,\r\n      colleagues: [],\r\n    },\r\n  ];\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  @action\r\n  add(employee: EmployeeFormData) {\r\n    let newEmployee = {...employee, id: maxId(this.employees) + 1};\r\n    this.employees.push(newEmployee);\r\n\r\n    return newEmployee;\r\n  }\r\n\r\n  @action\r\n  remove(id: number) {\r\n    this.employees = this.employees.filter(e => e.id !== id);\r\n  }\r\n\r\n  @action\r\n  update(employee: Employee) {\r\n    const index = this.employees.findIndex(e => e.id === employee.id);\r\n    this.employees[index] = employee;\r\n  }\r\n}\r\n\r\n","import {createContext, useContext} from \"react\";\r\nimport {EmployeeStore} from \"./EmployeeStore\";\r\n\r\nconst stores = {\r\n  employee: new EmployeeStore(),\r\n}\r\n\r\nexport const StoresContext = createContext({} as typeof stores);\r\nexport const StoresProvider = StoresContext.Provider;\r\n\r\nexport const useStores = () => useContext(StoresContext);","import {Employee} from \"../../models\";\r\nimport {FC} from \"react\";\r\n\r\ntype Props = {\r\n  employee: Employee\r\n  onClick: (id: number) => void\r\n  className: string\r\n}\r\n\r\nexport const EmployeeItem: FC<Props> = ({employee, onClick, className = ''}) => {\r\n  return (\r\n    <tr className={'employee-item ' + className} onClick={() => onClick(employee.id)}>\r\n      <td>{employee.fullName}</td>\r\n      <td>{employee.gender}</td>\r\n      <td>{employee.position}</td>\r\n      <td>{employee.birthday}</td>\r\n      <td>{employee.fired? 'да': 'нет'}</td>\r\n    </tr>\r\n  )\r\n}","import {Employee} from \"../../models\";\r\nimport {FC} from \"react\";\r\nimport {EmployeeItem} from \"./EmployeeItem\";\r\nimport {observer} from \"mobx-react\";\r\n\r\ntype Props = {\r\n  employees: Employee[]\r\n  onEmployeeClick: (id: number) => void\r\n  selectedEmployee: Employee\r\n}\r\n\r\nexport const EmployeeList: FC<Props> = observer(({employees, onEmployeeClick, selectedEmployee}) => {\r\n  const makeEmployee = (employee: Employee, index: number) => {\r\n    const isSelected = employee === selectedEmployee;\r\n\r\n    return <EmployeeItem\r\n      key={index}\r\n      employee={employee}\r\n      onClick={onEmployeeClick}\r\n      className={isSelected? 'selected-employee': ''}/>;\r\n  }\r\n\r\n  return (\r\n    <table className=\"employee-list table table-hover table-bordered mr-2\">\r\n      <thead>\r\n        <tr>\r\n          <td>ФИО</td>\r\n          <td>Пол</td>\r\n          <td>Должность</td>\r\n          <td>День рождения</td>\r\n          <td>Уволен</td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {employees.map(makeEmployee)}\r\n      </tbody>\r\n    </table>\r\n  )\r\n})","import {EmployeeFormData} from \"../models\";\r\nimport {Errors} from \"../components/employees/EmployeeDictionary\";\r\n\r\nexport const validateEmployee = (employee: EmployeeFormData) => {\r\n  const errors = {has: false} as Errors;\r\n  if (!employee || employee?.fullName === '') {\r\n    errors.fullName = 'ФИО обязательно';\r\n    errors.has = true;\r\n  }\r\n\r\n  return errors;\r\n}","import {observer} from \"mobx-react\";\r\nimport {FC} from \"react\";\r\nimport {Employee} from \"../../../models\";\r\nimport {EmployeeStore} from \"../../../stores/EmployeeStore\";\r\nimport {Errors} from \"../../employees/EmployeeDictionary\";\r\n\r\ntype Props = {\r\n  employeeStore: EmployeeStore\r\n  employee: Employee\r\n  errors: Errors\r\n}\r\n\r\nexport const EmployeeFormInputs: FC<Props> = observer(\r\n  ({employee, employeeStore, errors}) => {\r\n  const positions = ['разработчик', 'менеджер', 'рекрутер'];\r\n  const employees = employeeStore.employees;\r\n  const possibleColleagues = employees.filter(e => e.id !== employee?.id);\r\n\r\n  const handleFullNameInput = (fullName: string) => {\r\n    employeeStore.update({...employee, fullName});\r\n  }\r\n  const handleGenderChange = (gender: string) => {\r\n    employeeStore.update({...employee, gender});\r\n  }\r\n  const handlePositionChange = (position: string) => {\r\n    employeeStore.update({...employee, position});\r\n  }\r\n  const handleFiredChange = (fired: boolean) => {\r\n    employeeStore.update({...employee, fired});\r\n  }\r\n  const handleBirthdayChange = (birthday: string) => {\r\n    employeeStore.update({...employee, birthday});\r\n  }\r\n  const handleColleagueChange = (selectedOptions: HTMLCollectionOf<HTMLOptionElement>) => {\r\n    const ids: string[] = [];\r\n    for (let i = 0; i < selectedOptions.length; i++) {\r\n      ids.push(selectedOptions[i].value);\r\n    }\r\n    const colleagues = employees.filter(e => ids.includes(e.id.toString()));\r\n    employeeStore.update({...employee, colleagues})\r\n  }\r\n\r\n  const makePositionOption = (value: string, index: number) => {\r\n    return (\r\n      <option\r\n        key={index}\r\n        value={value}\r\n        selected={employee?.position === value}>{value}</option>\r\n    )\r\n  }\r\n  const makeColleague = (possibleColleague: Employee, index: number) => {\r\n    const isColleague = employee?.colleagues?.includes(possibleColleague)\r\n\r\n    return (\r\n      <option\r\n        key={index}\r\n        value={possibleColleague.id}\r\n        selected={isColleague}>{possibleColleague.fullName}</option>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mb-3\">\r\n        <label className=\"form-label\">ФИО</label>\r\n        <input\r\n          value={employee?.fullName?? ''}\r\n          onInput={e => handleFullNameInput(e.currentTarget.value)}\r\n          className=\"form-control\" name=\"full-name\"/>\r\n        <span className=\"text-danger\">{errors.fullName}</span>\r\n      </div>\r\n      <div className=\"form-check\">\r\n        <input\r\n          checked={employee?.gender === 'мужчина'}\r\n          onChange={e => handleGenderChange(e.currentTarget.value)}\r\n          type=\"radio\"\r\n          value=\"мужчина\"\r\n          id=\"male\"\r\n          name=\"gender\"\r\n          className=\"form-check-input\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"male\">Мужчина</label>\r\n      </div>\r\n      <div className=\"form-check mb-3\">\r\n        <input\r\n          checked={employee?.gender === 'женщина'}\r\n          onChange={e => handleGenderChange(e.currentTarget.value)}\r\n          type=\"radio\"\r\n          value=\"женщина\"\r\n          id=\"female\"\r\n          name=\"gender\"\r\n          className=\"form-check-input\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"female\">Женщина</label>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label>Должность</label>\r\n        <select\r\n          name=\"position\"\r\n          className=\"form-select\"\r\n          onChange={e => handlePositionChange(e.currentTarget.value)}>\r\n          {positions.map(makePositionOption)}\r\n        </select>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label>День рождения</label>\r\n        <input\r\n          value={employee?.birthday?? ''}\r\n          onChange={e => handleBirthdayChange(e.currentTarget.value)}\r\n          type=\"date\"\r\n          className=\"form-select\"/>\r\n      </div>\r\n      <div className=\"input-group mb-3\">\r\n        <input\r\n          checked={employee?.fired?? ''}\r\n          className=\"form-check-input\"\r\n          onChange={e => handleFiredChange(e.currentTarget.checked)}\r\n          type=\"checkbox\"\r\n          id=\"fired\"/>\r\n        <label htmlFor=\"fired\">Уволен</label>\r\n      </div>\r\n      <label>\r\n        Коллеги\r\n        <select\r\n          className=\"form-select\"\r\n          onChange={e => handleColleagueChange(e.currentTarget.selectedOptions)}\r\n          multiple>\r\n          {possibleColleagues.map(makeColleague)}\r\n        </select>\r\n      </label>\r\n    </>\r\n  )\r\n})","import {FC, useEffect, useState} from \"react\";\r\nimport {Employee} from \"../../../models\";\r\nimport {observer} from \"mobx-react\";\r\nimport {EmployeeStore} from \"../../../stores/EmployeeStore\";\r\nimport {Errors} from \"../../employees/EmployeeDictionary\";\r\nimport {validateEmployee} from \"../../../utils/validateEmloyee\";\r\nimport {EmployeeFormInputs} from \"./EmployeeFormInputs\";\r\n\r\ntype Props = {\r\n  employeeStore: EmployeeStore\r\n  employee: Employee\r\n  initialErrors: Errors\r\n}\r\n\r\nexport const EmployeeForm: FC<Props> = observer(\r\n  ({employee, employeeStore, initialErrors}) => {\r\n  const [errors, setErrors] = useState<Errors>(initialErrors);\r\n\r\n  useEffect(() => {\r\n    setErrors(initialErrors);\r\n  }, [initialErrors])\r\n\r\n  const handleRemoveClick = () => {\r\n    const errors = validateEmployee(employee)\r\n    if (!errors.has) {\r\n      employeeStore.remove(employee.id);\r\n    }\r\n\r\n    setErrors(errors);\r\n  }\r\n\r\n  return (\r\n    <div className=\"card card-body\">\r\n      <div>\r\n        <EmployeeFormInputs\r\n          employeeStore={employeeStore}\r\n          employee={employee}\r\n          errors={errors}/>\r\n        <button\r\n          disabled={employee === undefined}\r\n          onClick={handleRemoveClick}\r\n          className=\"btn btn-outline-danger\">Удалить</button>\r\n      </div>\r\n    </div>\r\n  )\r\n})","import {observer} from \"mobx-react\";\r\nimport {useStores} from \"../../stores\";\r\nimport {EmployeeList} from \"./EmployeeList\";\r\nimport {EmployeeForm} from \"../forms/EmployeeForm\";\r\nimport {useState} from \"react\";\r\nimport {Employee} from \"../../models\";\r\nimport {validateEmployee} from \"../../utils/validateEmloyee\";\r\n\r\nexport const EmployeeDictionary = observer(() => {\r\n  const stores = useStores();\r\n  const employeeStore = stores.employee;\r\n  const employees = employeeStore.employees;\r\n  const [selectedId, setSelectedId] = useState<number>();\r\n  const [errors, setErrors] = useState({} as Errors)\r\n\r\n  const addNewEmployee = () => {\r\n    const selected = getEmployById(selectedId);\r\n    const errors = validateEmployee(selected);\r\n    if (selected && errors.has) {\r\n      setErrors(errors);\r\n      return;\r\n    }\r\n\r\n    const employee = employeeStore.add({\r\n      id: -1,\r\n      fullName: '',\r\n      fired: false,\r\n      position: 'разработчик',\r\n      gender: 'женщина',\r\n      birthday: '',\r\n      colleagues: []\r\n    });\r\n    setSelectedId(employee.id);\r\n    setErrors({} as Errors);\r\n  }\r\n  const trySetSelectedId = (id: number) => {\r\n    const selected = getEmployById(selectedId);\r\n    const errors = validateEmployee(selected);\r\n    if (selected && errors.has) {\r\n      setErrors(errors);\r\n      return;\r\n    }\r\n\r\n    setSelectedId(id);\r\n    setErrors({} as Errors);\r\n  }\r\n  const getEmployById = (id?: number) => {\r\n    return employees.find(e => e.id === id) as Employee;\r\n  }\r\n\r\n  return (\r\n    <div className=\"employee-dictionary\">\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-md-\">\r\n          <button className=\"btn btn-outline-primary\" onClick={addNewEmployee}>Добавить</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          <EmployeeList\r\n            selectedEmployee={getEmployById(selectedId)}\r\n            employees={employees}\r\n            onEmployeeClick={trySetSelectedId}/>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <EmployeeForm\r\n            initialErrors={errors}\r\n            employeeStore={employeeStore}\r\n            employee={getEmployById(selectedId)}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport type Errors = {\r\n  fullName?: string\r\n  has: boolean\r\n}","import React from 'react';\nimport './App.css';\nimport { StoresProvider } from './stores';\nimport {EmployeeStore} from \"./stores/EmployeeStore\";\nimport {EmployeeDictionary} from \"./components/employees/EmployeeDictionary\"\n\nfunction App() {\n  const employeeStore = new EmployeeStore();\n\n  return (\n    <StoresProvider value={{employee: employeeStore}}>\n      <div className=\"App\">\n        <EmployeeDictionary/>\n      </div>\n    </StoresProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}